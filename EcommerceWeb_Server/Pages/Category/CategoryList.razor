@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime;
@using Ecommerce_Common
@attribute [Authorize(Roles =SD.Role_Admin)]

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmTask_Click"></_DeleteConfirmation>


<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>
    <div class="col-12 p-3">
        @if(Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var objCat in Categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td>
                            <td>
                                <NavLink href="@($"category/edit/{objCat.Id}")" class="btn-primary btn">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        else
        {
            if(IsLoading)
            {
                //Loading gif
                <div class="text-center">
                    <img src="/images/Glass spheres.gif">
                </div>
            }
            else 
            {
                //no records
                <p>No Records Found.</p>
            }
        }
    </div>
</div>
@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private bool IsLoading { get; set; } 

    private int DeleteCategoryId {get;set;}=0;
    //protected override void OnInitialized()  //Synchronus Programming takes alot of time to retrieve data .to remove this problem we will be using Asynchronus version.
    //{
    //    Categories = _categoryRepository.GetAll();
    //}
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
           await LoadCategories();
        }
    }
    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories =await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal"); //This Function doesn't return anything thats why InvokeVoidAsync is used//
    }
    public async Task ConfirmTask_Click(bool isConfirmed)
    {
        IsLoading = true;
        if(isConfirmed && DeleteCategoryId!=0) 
        {
           //delete
           //await Task.Delay(5000);
           await  _categoryRepository.DeleteFromSP(DeleteCategoryId);
           await  LoadCategories();
           await  _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
